// https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js":
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Table pour gérer tout ce qui est login

model TheGame {
  id          Int      @id @default(1)
  description String?
}

model User {
  name     String    @id
  email    String?   @unique
  password String?
  Player   Player?
  sessions Session[]
  isAdmin  Boolean   @default(false)
}

model Player {
  name        String  @id
  displayName String?
  icon        String?
  User        User    @relation(fields: [name], references: [name])
  score       Int     @default(0)
  maisonId    Int?
  maison      Maison? @relation(fields: [maisonId], references: [id])
}

model Maison {
  id    Int    @id @default(autoincrement())
  name  String @unique
  score Int    @default(0)

  players Player[]
}

// Session, l'id c'est le code de session. à mettre en cookie & dans le header
model Session {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [name])
  createdAt DateTime @default(now())
  expires   DateTime
}

model Quest {
  id          Int       @id @default(autoincrement())
  title       String
  img         String?
  description String?
  lore        String?
  global      Boolean
  points      Int       @default(1)
  starts      DateTime?
  ends        DateTime?
}

// model hasAccess {
//   playerName String
//   questId    Int

//   date    DateTime? @default(now())
//   expires DateTime?

//   @@id([playerName, questId])
// }

model hasFinished {
  playerName String
  questId    Int

  date    DateTime? @default(now())
  expires DateTime?

  @@id([playerName, questId])
}

model NPC {
  id          Int     @id @unique
  name        String
  img         String?
  description String?
  show        Boolean @default(false)
}

model PointsHistory {
  id          Int      @id @default(autoincrement())
  playerName  String
  questId     Int?
  points      Int
  date        DateTime @default(now())
  description String?
}
